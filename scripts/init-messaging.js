const { connectMongoose } = require('../lib/mongoose')
const { Channel } = require('../lib/models/channel')
const { User } = require('../lib/models/user')
const { Message } = require('../lib/models/message')

async function initMessaging() {
  try {
    console.log('üöÄ Initialisation du syst√®me de messagerie...')
    await connectMongoose()

    // V√©rifier si l'utilisateur admin existe
    let adminUser = await User.findOne({ email: 'admin@test.com' })
    if (!adminUser) {
      console.log('‚ùå Utilisateur admin non trouv√©. Veuillez d\'abord cr√©er un utilisateur admin.')
      return
    }

    console.log('‚úÖ Utilisateur admin trouv√©:', adminUser.name)

    // Cr√©er des channels de base s'ils n'existent pas
    const channels = [
      {
        name: 'g√©n√©ral',
        type: 'public',
        description: 'Canal g√©n√©ral pour les discussions',
        members: [{ user: adminUser._id, role: 'admin', joinedAt: new Date() }],
        settings: {
          allowFileUploads: true,
          allowReactions: true,
          slowModeSeconds: 0,
          requireApproval: false
        },
        ipRestrictions: {
          enabled: true,
          allowedIPs: ['127.0.0.1', '::1', 'localhost'],
          whitelist: ['127.0.0.1', '::1']
        },
        isActive: true,
        createdBy: adminUser._id
      },
      {
        name: 'annonces',
        type: 'public',
        description: 'Canal pour les annonces importantes',
        members: [{ user: adminUser._id, role: 'admin', joinedAt: new Date() }],
        settings: {
          allowFileUploads: true,
          allowReactions: true,
          slowModeSeconds: 0,
          requireApproval: true
        },
        ipRestrictions: {
          enabled: true,
          allowedIPs: ['127.0.0.1', '::1', 'localhost'],
          whitelist: ['127.0.0.1', '::1']
        },
        isActive: true,
        createdBy: adminUser._id
      },
      {
        name: 'ia-assistant',
        type: 'ai_assistant',
        description: 'Canal pour interagir avec l\'assistant IA',
        members: [{ user: adminUser._id, role: 'admin', joinedAt: new Date() }],
        settings: {
          allowFileUploads: false,
          allowReactions: true,
          slowModeSeconds: 0,
          requireApproval: false
        },
        aiSettings: {
          provider: 'openai',
          model: 'gpt-4',
          temperature: 0.7,
          maxTokens: 1000,
          systemPrompt: 'Tu es un assistant IA sp√©cialis√© dans les espaces de coworking. Aide les utilisateurs avec leurs questions.'
        },
        ipRestrictions: {
          enabled: true,
          allowedIPs: ['127.0.0.1', '::1', 'localhost'],
          whitelist: ['127.0.0.1', '::1']
        },
        isActive: true,
        createdBy: adminUser._id
      }
    ]

    for (const channelData of channels) {
      const existingChannel = await Channel.findOne({ name: channelData.name })
      if (!existingChannel) {
        const channel = new Channel(channelData)
        await channel.save()
        console.log(`‚úÖ Canal cr√©√©: ${channel.name} (${channel.type})`)

        // Ajouter un message de bienvenue
        if (channel.name === 'g√©n√©ral') {
          const welcomeMessage = new Message({
            content: `Bienvenue dans le canal ${channel.name} ! üëã\\n\\nCe canal est destin√© aux discussions g√©n√©rales de l'espace de coworking.`,
            messageType: 'system',
            sender: adminUser._id,
            channel: channel._id,
            createdAt: new Date(),
            readBy: [{ user: adminUser._id, readAt: new Date() }]
          })
          await welcomeMessage.save()
          console.log(`üìù Message de bienvenue ajout√© pour ${channel.name}`)
        }
      } else {
        console.log(`‚ÑπÔ∏è  Canal ${channelData.name} existe d√©j√†`)
      }
    }

    console.log('‚úÖ Initialisation du syst√®me de messagerie termin√©e')
    
    // Afficher un r√©sum√©
    const totalChannels = await Channel.countDocuments()
    const totalMessages = await Message.countDocuments()
    
    console.log('üìä R√©sum√©:')
    console.log(`   - Canaux: ${totalChannels}`)
    console.log(`   - Messages: ${totalMessages}`)
    console.log(`   - Utilisateur admin: ${adminUser.name} (${adminUser.email})`)
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error)
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  initMessaging()
}

module.exports = { initMessaging }