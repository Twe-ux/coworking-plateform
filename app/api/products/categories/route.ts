import { NextRequest } from 'next/server'
import dbConnect from '@/lib/mongodb'
import { Product } from '@/lib/models'

export async function GET(request: NextRequest) {
  try {
    await dbConnect()

    // R√©cup√©rer les statistiques par cat√©gorie
    const categoryStats = await Product.aggregate([
      { $match: { status: 'available' } },
      {
        $group: {
          _id: '$category',
          count: { $sum: 1 },
          averagePrice: { $avg: '$price' },
          minPrice: { $min: '$price' },
          maxPrice: { $max: '$price' },
          featuredCount: {
            $sum: { $cond: ['$featured', 1, 0] }
          }
        }
      },
      { $sort: { count: -1 } }
    ])

    // Mapping des cat√©gories avec leurs m√©tadonn√©es
    const categoryMetadata: Record<string, any> = {
      coffee: {
        name: 'Caf√©',
        description: 'Nos d√©licieux caf√©s artisanaux',
        icon: '‚òï',
        color: '#8B4513'
      },
      tea: {
        name: 'Th√©',
        description: 'Une s√©lection de th√©s du monde entier',
        icon: 'üçµ',
        color: '#228B22'
      },
      pastry: {
        name: 'P√¢tisseries',
        description: 'Viennoiseries et p√¢tisseries fra√Æches',
        icon: 'ü•ê',
        color: '#DAA520'
      },
      sandwich: {
        name: 'Sandwichs',
        description: 'Sandwichs frais et savoureux',
        icon: 'ü•™',
        color: '#CD853F'
      },
      snack: {
        name: 'Snacks',
        description: 'Petites collations pour tous les go√ªts',
        icon: 'üç™',
        color: '#DEB887'
      },
      beverage: {
        name: 'Boissons',
        description: 'Boissons fra√Æches et rafra√Æchissantes',
        icon: 'ü•§',
        color: '#4169E1'
      },
      healthy: {
        name: 'Healthy',
        description: 'Options saines et √©quilibr√©es',
        icon: 'ü•ó',
        color: '#32CD32'
      },
      breakfast: {
        name: 'Petit-d√©jeuner',
        description: 'Pour bien commencer la journ√©e',
        icon: 'üç≥',
        color: '#FF6347'
      }
    }

    // Enrichir les donn√©es avec les m√©tadonn√©es
    const enrichedCategories = categoryStats.map(category => ({
      id: category._id,
      slug: category._id,
      ...categoryMetadata[category._id],
      stats: {
        count: category.count,
        averagePrice: Math.round(category.averagePrice * 100) / 100,
        priceRange: {
          min: category.minPrice,
          max: category.maxPrice
        },
        featuredCount: category.featuredCount
      }
    }))

    // Ajouter les cat√©gories sans produits
    const existingCategories = categoryStats.map(cat => cat._id)
    const allCategories = Object.keys(categoryMetadata)
    
    const emptyCategories = allCategories
      .filter(cat => !existingCategories.includes(cat))
      .map(cat => ({
        id: cat,
        slug: cat,
        ...categoryMetadata[cat],
        stats: {
          count: 0,
          averagePrice: 0,
          priceRange: { min: 0, max: 0 },
          featuredCount: 0
        }
      }))

    const allCategoriesWithStats = [...enrichedCategories, ...emptyCategories]
      .sort((a, b) => b.stats.count - a.stats.count)

    // Statistiques globales
    const totalProducts = await Product.countDocuments({ status: 'available' })
    const featuredProducts = await Product.countDocuments({ 
      status: 'available', 
      featured: true 
    })

    return Response.json({
      success: true,
      data: {
        categories: allCategoriesWithStats,
        globalStats: {
          totalProducts,
          featuredProducts,
          totalCategories: allCategories.length,
          activeCategories: enrichedCategories.length
        }
      },
      message: 'Cat√©gories r√©cup√©r√©es avec succ√®s'
    })

  } catch (error: any) {
    console.error('Erreur lors de la r√©cup√©ration des cat√©gories:', error)
    return Response.json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des cat√©gories',
      error: error.message
    }, { status: 500 })
  }
}