import { NextRequest, NextResponse } from 'next/server'
import { connectToDatabase } from '@/lib/mongodb'
import { ObjectId } from 'mongodb'

/**
 * POST /api/bookings-test - Cr√©er une r√©servation test
 * Version simplifi√©e sans authentification pour les tests
 */
export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ Test de cr√©ation de r√©servation...')

    const body = await request.json()

    // Validation basique
    const {
      spaceId,
      date,
      startTime,
      endTime,
      duration,
      durationType,
      guests,
    } = body

    if (!spaceId || !date || !startTime || !endTime) {
      return NextResponse.json(
        {
          error:
            'Donn√©es manquantes: spaceId, date, startTime, endTime sont requis',
        },
        { status: 400 }
      )
    }

    const { db } = await connectToDatabase()

    // V√©rifier que l'espace existe
    const spacesCollection = db.collection('spaces')
    const space = await spacesCollection.findOne({ id: spaceId })

    if (!space) {
      return NextResponse.json(
        { error: `Espace non trouv√©: ${spaceId}` },
        { status: 404 }
      )
    }

    // Calculer le prix total basique
    const hours = duration || 2
    const totalPrice = space.pricePerHour * hours

    // Cr√©er un utilisateur test
    const testUserId = new ObjectId()

    // Cr√©er la r√©servation
    const booking = {
      userId: testUserId,
      spaceId: new ObjectId(space._id),
      spaceName: space.name, // Pour faciliter les requ√™tes
      date: new Date(date),
      startTime,
      endTime,
      duration: duration || 2,
      durationType: durationType || 'hour',
      guests: guests || 1,
      totalPrice,
      status: 'confirmed', // Directement confirm√© pour les tests
      notes: 'R√©servation de test',
      createdAt: new Date(),
      updatedAt: new Date(),
    }

    console.log('üìù Cr√©ation de la r√©servation:', booking)

    const bookingsCollection = db.collection('bookings')
    const result = await bookingsCollection.insertOne(booking)

    if (!result.insertedId) {
      throw new Error("Erreur lors de l'insertion de la r√©servation")
    }

    console.log(`‚úÖ R√©servation cr√©√©e avec l'ID: ${result.insertedId}`)

    return NextResponse.json({
      message: 'R√©servation de test cr√©√©e avec succ√®s',
      booking: {
        ...booking,
        _id: result.insertedId,
      },
    })
  } catch (error) {
    console.error(
      '‚ùå Erreur lors de la cr√©ation de la r√©servation test:',
      error
    )

    return NextResponse.json(
      {
        error: 'Erreur lors de la cr√©ation de la r√©servation',
        details: error instanceof Error ? error.message : 'Erreur inconnue',
      },
      { status: 500 }
    )
  }
}

/**
 * GET /api/bookings-test - Liste des r√©servations test
 */
export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ R√©cup√©ration des r√©servations test...')

    const { db } = await connectToDatabase()
    const bookingsCollection = db.collection('bookings')

    // R√©cup√©rer toutes les r√©servations
    const bookings = await bookingsCollection
      .find()
      .sort({ createdAt: -1 })
      .limit(10)
      .toArray()

    console.log(`‚úÖ ${bookings.length} r√©servation(s) trouv√©e(s)`)

    return NextResponse.json({
      bookings,
      total: bookings.length,
    })
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des r√©servations:', error)

    return NextResponse.json(
      {
        error: 'Erreur lors de la r√©cup√©ration des r√©servations',
        details: error instanceof Error ? error.message : 'Erreur inconnue',
      },
      { status: 500 }
    )
  }
}
