#!/bin/bash

# Test script pour le syst√®me de suivi du temps de travail
# Ce script teste tous les endpoints de l'API time tracking

set -e  # Exit on error

BASE_URL="http://localhost:3000"
EMPLOYEE_ID=""
TIME_ENTRY_ID=""
PIN="1111"

echo "üß™ Tests du syst√®me de suivi du temps de travail"
echo "================================================"

# Fonction pour faire des requ√™tes API
api_call() {
    local method="$1"
    local endpoint="$2"
    local data="$3"
    local expected_status="$4"
    
    echo "üì° $method $endpoint"
    
    if [ -n "$data" ]; then
        response=$(curl -s -X "$method" \
            -H "Content-Type: application/json" \
            -w "HTTPSTATUS:%{http_code}" \
            -d "$data" \
            "$BASE_URL$endpoint")
    else
        response=$(curl -s -X "$method" \
            -H "Content-Type: application/json" \
            -w "HTTPSTATUS:%{http_code}" \
            "$BASE_URL$endpoint")
    fi
    
    http_code=$(echo "$response" | grep -o "HTTPSTATUS:.*" | cut -d: -f2)
    body=$(echo "$response" | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
    
    echo "üìä Status: $http_code"
    echo "üìÑ Response: $body" | jq '.' 2>/dev/null || echo "$body"
    echo ""
    
    if [ -n "$expected_status" ] && [ "$http_code" != "$expected_status" ]; then
        echo "‚ùå Erreur: Status attendu $expected_status, re√ßu $http_code"
        exit 1
    fi
    
    echo "$body"
}

# Test 1: R√©cup√©rer la liste des employ√©s
echo "üîç Test 1: R√©cup√©ration des employ√©s"
employees_response=$(api_call "GET" "/api/employees" "" "200")
EMPLOYEE_ID=$(echo "$employees_response" | jq -r '.data[0].id' 2>/dev/null || "")

if [ -z "$EMPLOYEE_ID" ] || [ "$EMPLOYEE_ID" = "null" ]; then
    echo "‚ùå Aucun employ√© trouv√©. Cr√©ons-en un..."
    
    # Cr√©er un employ√© de test
    employee_data='{
        "firstName": "Jean",
        "lastName": "Dupont",
        "email": "jean.dupont@test.com",
        "role": "Staff",
        "pin": "1111"
    }'
    
    employee_response=$(api_call "POST" "/api/employees" "$employee_data" "201")
    EMPLOYEE_ID=$(echo "$employee_response" | jq -r '.data.id')
fi

echo "‚úÖ Employ√© ID: $EMPLOYEE_ID"
echo ""

# Test 2: V√©rification du PIN
echo "üîê Test 2: V√©rification du PIN"
pin_data="{\"employeeId\": \"$EMPLOYEE_ID\", \"pin\": \"$PIN\"}"
api_call "POST" "/api/employees/verify-pin" "$pin_data" "200"

# Test 2b: V√©rification avec mauvais PIN
echo "üîê Test 2b: V√©rification avec mauvais PIN"
bad_pin_data="{\"employeeId\": \"$EMPLOYEE_ID\", \"pin\": \"9999\"}"
api_call "POST" "/api/employees/verify-pin" "$bad_pin_data" "401"

# Test 3: Clock-in (Pointage d'entr√©e)
echo "‚è∞ Test 3: Clock-in"
clockin_data="{\"employeeId\": \"$EMPLOYEE_ID\", \"pin\": \"$PIN\"}"
clockin_response=$(api_call "POST" "/api/time-entries/clock-in" "$clockin_data" "201")
TIME_ENTRY_ID=$(echo "$clockin_response" | jq -r '.data.id')

echo "‚úÖ Time Entry ID: $TIME_ENTRY_ID"
echo ""

# Test 4: Tentative de double clock-in (doit √©chouer)
echo "‚è∞ Test 4: Tentative de double clock-in"
api_call "POST" "/api/time-entries/clock-in" "$clockin_data" "409"

# Test 5: R√©cup√©ration des time entries
echo "üìã Test 5: R√©cup√©ration des time entries"
api_call "GET" "/api/time-entries" "" "200"

# Test 6: R√©cup√©ration d'un time entry sp√©cifique
echo "üîç Test 6: R√©cup√©ration d'un time entry sp√©cifique"
api_call "GET" "/api/time-entries/$TIME_ENTRY_ID" "" "200"

# Test 7: Attendre quelques secondes puis clock-out
echo "‚è∞ Test 7: Attente de 3 secondes puis clock-out"
sleep 3

clockout_data="{\"employeeId\": \"$EMPLOYEE_ID\", \"pin\": \"$PIN\", \"timeEntryId\": \"$TIME_ENTRY_ID\"}"
api_call "POST" "/api/time-entries/clock-out" "$clockout_data" "200"

# Test 8: Clock-in pour un second shift
echo "‚è∞ Test 8: Clock-in pour un second shift"
second_clockin_response=$(api_call "POST" "/api/time-entries/clock-in" "$clockin_data" "201")
SECOND_TIME_ENTRY_ID=$(echo "$second_clockin_response" | jq -r '.data.id')

echo "‚úÖ Second Time Entry ID: $SECOND_TIME_ENTRY_ID"
echo ""

# Test 9: Tentative de troisi√®me shift (doit √©chouer)
echo "‚è∞ Test 9: Tentative de troisi√®me shift (max 2 par jour)"
api_call "POST" "/api/time-entries/clock-in" "$clockin_data" "409"

# Test 10: Modification d'un time entry
echo "‚úèÔ∏è Test 10: Modification d'un time entry"
current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%03NZ")
update_data="{\"clockOut\": \"$current_time\"}"
api_call "PUT" "/api/time-entries/$SECOND_TIME_ENTRY_ID" "$update_data" "200"

# Test 11: Rapport journalier
echo "üìä Test 11: Rapport journalier"
today=$(date +%Y-%m-%d)
api_call "GET" "/api/time-entries/reports?type=daily&date=$today" "" "200"

# Test 12: Statistiques d'employ√©
echo "üìà Test 12: Statistiques d'employ√©"
api_call "GET" "/api/time-entries/reports?type=employee-stats&employeeId=$EMPLOYEE_ID" "" "200"

# Test 13: Statistiques r√©sum√©es
echo "üìä Test 13: Statistiques r√©sum√©es"
api_call "GET" "/api/time-entries/reports?type=summary" "" "200"

# Test 14: R√©cup√©ration avec filtres
echo "üîç Test 14: R√©cup√©ration avec filtres"
api_call "GET" "/api/time-entries?employeeId=$EMPLOYEE_ID&status=completed" "" "200"

# Test 15: Suppression d'un time entry (soft delete)
echo "üóëÔ∏è Test 15: Suppression d'un time entry"
api_call "DELETE" "/api/time-entries/$TIME_ENTRY_ID" "" "200"

# Test 16: V√©rification que le time entry supprim√© n'appara√Æt plus
echo "üîç Test 16: V√©rification de la suppression"
api_call "GET" "/api/time-entries/$TIME_ENTRY_ID" "" "404"

echo "‚úÖ Tous les tests sont termin√©s!"
echo ""
echo "üìã R√©sum√© des fonctionnalit√©s test√©es:"
echo "- Gestion des employ√©s et v√©rification PIN ‚úÖ"
echo "- Clock-in avec validation des shifts ‚úÖ"
echo "- Clock-out avec calcul d'heures ‚úÖ"
echo "- Limitation √† 2 shifts par jour ‚úÖ"
echo "- CRUD complet des time entries ‚úÖ"
echo "- G√©n√©ration de rapports ‚úÖ"
echo "- Filtrage et pagination ‚úÖ"
echo "- Soft delete ‚úÖ"
echo ""
echo "üéâ Le syst√®me de suivi du temps est op√©rationnel!"